info:
  title: Bookadzone Backend API
  description: API for managing FAQs, FooterInfo, Configs, and user authentication for the Bookadzone platform.
  version: 1.0.0
servers:
  # - url: https://bookadzonebackend.onrender.com/api/v1
  - url: http://localhost:5000/api/v1
    description: Local development server
openapi: 3.0.3
paths:
  # Authentication Endpoints
  /auth/login:
    post:
      summary: Authenticate a user or admin
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin@gmail.com
                password:
                  type: string
                  example: admin@123
                testField:
                  type: string
                  example: test
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - message
                  - token
                  - data
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Logged in successfully
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  data:
                    type: object
                    required:
                      - _id
                      - email
                      - role
                      - status
                    properties:
                      _id:
                        type: string
                        example: 68ad430b8089095867639823
                      email:
                        type: string
                        example: bookadzone@gmail.com
                      role:
                        type: string
                        example: super-admin
                      status:
                        type: string
                        example: active
        '400':
          description: Invalid credentials or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/refresh:
    post:
      summary: Refresh an authentication token
      tags:
        - Authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: Bearer token for authentication
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - message
                  - token
                  - data
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Token refreshed successfully
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  data:
                    type: object
                    required:
                      - _id
                    properties:
                      _id:
                        type: string
                        example: 68ad430b8089095867639823
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # FAQ Endpoints
  /faqs:
    get:
      summary: Get all FAQs
      tags:
        - FAQs
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Faq'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      active:
                        type: integer
                      inactive:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /faqs/getFaqById/{id}:
    get:
      summary: Get a FAQ by ID
      tags:
        - FAQs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      responses:
        '200':
          description: FAQ found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Faq'
        '400':
          description: FAQ id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /faqs/updateFaq/{id}:
    put:
      summary: Update a FAQ by ID
      tags:
        - FAQs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaqInput'
      responses:
        '200':
          description: FAQ updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FAQ updated
                  data:
                    $ref: '#/components/schemas/Faq'
        '400':
          description: FAQ id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /faqs/softDeleteFaq/{id}:
    delete:
      summary: Soft delete a FAQ by ID
      tags:
        - FAQs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      responses:
        '200':
          description: FAQ deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FAQ deleted successfully
        '400':
          description: FAQ id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /faqs/togglestatus/{id}:
    patch:
      summary: Toggle the status of a FAQ (active/inactive)
      tags:
        - FAQs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      responses:
        '200':
          description: FAQ status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FAQ status toggled
                  data:
                    $ref: '#/components/schemas/Faq'
        '400':
          description: FAQ id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /faqs/trash:
    get:
      summary: Get all trashed FAQs
      tags:
        - FAQs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: List of trashed FAQs
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Faq'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 1
                      active:
                        type: integer
                        example: 1
                      inactive:
                        type: integer
                        example: 0
                      totalPages:
                        type: integer
                        example: 1
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /faqs/restore/{id}:
    patch:
      summary: Restore a soft-deleted FAQ
      tags:
        - FAQs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      responses:
        '200':
          description: FAQ restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FAQ restored successfully
        '400':
          description: FAQ id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /faqs/permanentDelete/{id}:
    delete:
      summary: Permanently delete a FAQ
      tags:
        - FAQs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      responses:
        '200':
          description: FAQ permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FAQ permanently deleted
        '400':
          description: FAQ id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # FooterInfo Endpoints
  /footerinfo:
    post:
      summary: Create a new FooterInfo
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FooterInfoInput'
      responses:
        '201':
          description: FooterInfo created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FooterInfo created
                  data:
                    $ref: '#/components/schemas/FooterInfo'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: FooterInfo with this logo already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all FooterInfo records
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: List of FooterInfo records
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      footers:
                        type: array
                        items:
                          $ref: '#/components/schemas/FooterInfo'
                      stats:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 1
                          active:
                            type: integer
                            example: 1
                          inactive:
                            type: integer
                            example: 0
                          totalPages:
                            type: integer
                            example: 1
                          page:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /footerinfo/getfooterinfoById/{id}:
    get:
      summary: Get a FooterInfo by ID
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FooterInfo ID
      responses:
        '200':
          description: FooterInfo found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/FooterInfo'
        '400':
          description: FooterInfo id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FooterInfo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /footerinfo/updatefooterinfo/{id}:
    put:
      summary: Update a FooterInfo by ID
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FooterInfo ID
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FooterInfoInput'
      responses:
        '200':
          description: FooterInfo updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FooterInfo updated
                  data:
                    $ref: '#/components/schemas/FooterInfo'
        '400':
          description: FooterInfo id is required or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FooterInfo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /footerinfo/softDeletefooterinfo/{id}:
    delete:
      summary: Soft delete a FooterInfo by ID
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FooterInfo ID
      responses:
        '200':
          description: FooterInfo deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FooterInfo deleted successfully
        '400':
          description: FooterInfo id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FooterInfo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /footerinfo/togglestatus/{id}:
    patch:
      summary: Toggle the status of a FooterInfo (active/inactive)
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FooterInfo ID
      responses:
        '200':
          description: FooterInfo status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FooterInfo status toggled
                  data:
                    $ref: '#/components/schemas/FooterInfo'
        '400':
          description: FooterInfo id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FooterInfo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /footerinfo/trash:
    get:
      summary: Get all trashed FooterInfo records
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: List of trashed FooterInfo records
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      footers:
                        type: array
                        items:
                          $ref: '#/components/schemas/FooterInfo'
                      stats:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 1
                          active:
                            type: integer
                            example: 1
                          inactive:
                            type: integer
                            example: 0
                          totalPages:
                            type: integer
                            example: 1
                          page:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /footerinfo/restore/{id}:
    patch:
      summary: Restore a soft-deleted FooterInfo
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FooterInfo ID
      responses:
        '200':
          description: FooterInfo restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FooterInfo restored successfully
        '400':
          description: FooterInfo id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FooterInfo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /footerinfo/permanentDelete/{id}:
    delete:
      summary: Permanently delete a FooterInfo
      tags:
        - FooterInfo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FooterInfo ID
      responses:
        '200':
          description: FooterInfo permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: FooterInfo permanently deleted
        '400':
          description: FooterInfo id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: FooterInfo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Config Endpoints
  /configs:
    post:
      summary: Create a new config
      tags:
        - Configs
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigInput'
      responses:
        '201':
          description: Config created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config created
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Config with this slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all configs
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Config'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      active:
                        type: integer
                      inactive:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configs/getConfigById/{id}:
    get:
      summary: Get config by ID
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configs/updateConfig/{id}:
    put:
      summary: Update a config
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigInput'
      responses:
        '200':
          description: Config updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config updated
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Config id is required or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Config with this slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configs/softDeleteConfig/{id}:
    delete:
      summary: Soft delete a config
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config soft deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config soft deleted
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configs/togglestatus/{id}:
    patch:
      summary: Toggle config status
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config status toggled
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configs/trash:
    get:
      summary: Get all trashed configs
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            example: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: List of trashed configs
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Config'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 1
                      active:
                        type: integer
                        example: 1
                      inactive:
                        type: integer
                        example: 0
                      totalPages:
                        type: integer
                        example: 1
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configs/restore/{id}:
    patch:
      summary: Restore a config from trash
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config restored successfully
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /configs/permanentDelete/{id}:
    delete:
      summary: Permanently delete a config
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config permanently deleted
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Faq:
      type: object
      properties:
        _id:
          type: string
          example: 68ad430b8089095867639823
        question:
          type: string
          example: What is the purpose of this API?
        answer:
          type: string
          example: This API manages FAQs for the Bookadzone platform.
        status:
          type: string
          enum:
            - active
            - inactive
          example: active
        isDeleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: 2025-09-09T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-09T12:00:00Z
      required:
        - question
        - answer
    FaqInput:
      type: object
      properties:
        question:
          type: string
          example: What is the purpose of this API?
        answer:
          type: string
          example: This API manages FAQs for the Bookadzone platform.
        status:
          type: string
          enum:
            - active
            - inactive
          example: active
        isDeleted:
          type: boolean
          example: false
      required:
        - question
        - answer
    FooterInfo:
      type: object
      properties:
        _id:
          type: string
          example: 68ad430b8089095867639823
        logo:
          type: string
          example: 1758354994620-305898797.jpg
        description:
          type: string
          example: This is footer description.
        socialmedia:
          type: string
          example: Facebook
        socialmedialinks:
          type: string
          example: https://facebook.com/test
        google:
          type: string
          example: https://play.google.com/app/test
        appstore:
          type: string
          example: https://appstore.com/test
        status:
          type: string
          enum:
            - active
            - inactive
          example: active
        priority:
          type: integer
          example: 1
        isDeleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: 2025-09-09T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-09T12:00:00Z
      required:
        - logo
        - description
    FooterInfoInput:
      type: object
      properties:
        logo:
          type: string
          format: binary
          example: logo.png
        description:
          type: string
          example: This is footer description.
        socialmedia:
          type: string
          example: Facebook
        socialmedialinks:
          type: string
          example: https://facebook.com/test
        google:
          type: string
          example: https://play.google.com/app/test
        appstore:
          type: string
          example: https://appstore.com/test
        status:
          type: string
          enum:
            - active
            - inactive
          example: active
        priority:
          type: integer
          example: 1
      required:
        - logo
        - description
    Config:
      type: object
      properties:
        _id:
          type: string
          example: 68ad430b8089095867639823
        name:
          type: string
          example: Site Settings
        slug:
          type: string
          example: site-settings
        configFields:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                example: site_title
              value:
                type: string
                example: Bookadzone
        status:
          type: string
          enum:
            - active
            - inactive
          example: active
        priority:
          type: integer
          example: 1
        isDeleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: 2025-09-09T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-09T12:00:00Z
      required:
        - name
        - slug
    ConfigInput:
      type: object
      properties:
        name:
          type: string
          example: Site Settings
        slug:
          type: string
          example: site-settings
        configFields:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                example: site_title
              value:
                type: string
                example: Bookadzone
        status:
          type: string
          enum:
            - active
            - inactive
          example: active
        priority:
          type: integer
          example: 1
        isDeleted:
          type: boolean
          example: false
      required:
        - name
        - slug
    Error:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid input
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT