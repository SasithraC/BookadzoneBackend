# Config endpoints and schemas
paths:
  /configs:
    post:
      summary: Create a new config
      tags:
        - Configs
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigInput'
      responses:
        '201':
          description: Config created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config created
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Config with this slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all configs
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Config'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      active:
                        type: integer
                      inactive:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configs/getConfigById/{id}:
    get:
      summary: Get config by ID
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configs/updateConfig/{id}:
    put:
      summary: Update a config
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigInput'
      responses:
        '200':
          description: Config updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config updated
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Config id is required or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Config with this slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configs/softDeleteConfig/{id}:
    delete:
      summary: Soft delete a config
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config soft deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config soft deleted
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configs/togglestatus/{id}:
    patch:
      summary: Toggle config status
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config status toggled
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configs/trash:
    get:
      summary: Get all trashed configs
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Config'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      active:
                        type: integer
                      inactive:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configs/restore/{id}:
    patch:
      summary: Restore a config from trash
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config restored successfully
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configs/permanentDelete/{id}:
    delete:
      summary: Permanently delete a config
      tags:
        - Configs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Config ID
      responses:
        '200':
          description: Config permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config permanently deleted
        '400':
          description: Config id is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Config not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Config:
      type: object
      properties:
        _id:
          type: string
          example: 68ad430b8089095867639823
        name:
          type: string
          example: Site Settings
        slug:
          type: string
          example: site-settings
        configFields:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                example: site_title
              value:
                type: string
                example: Bookadzone
        status:
          type: string
          enum:
            - active
            - inactive
          example: active
        isDeleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: 2025-09-09T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-09T12:00:00Z
      required:
        - name
        - slug

    ConfigInput:
      type: object
      properties:
        name:
          type: string
          example: Site Settings
        slug:
          type: string
          example: site-settings
        configFields:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                example: site_title
              value:
                type: string
                example: Bookadzone
        status:
          type: string
          enum:
            - active
            - inactive
          example: active
        isDeleted:
          type: boolean
          example: false
      required:
        - name
        - slug

    Error:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid input