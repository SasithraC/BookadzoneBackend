openapi: 3.0.3
info:
  title: Bookadzone Backend API
  description: API for managing FAQs, Configs, BlogCategorie, and user authentication for the Bookadzone platform.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
    description: Local development server

paths:
  # Authentication endpoints
  /auth/login:
    $ref: './auth.yaml#/paths/~1auth~1login'
  /auth/refresh:
    $ref: './auth.yaml#/paths/~1auth~1refresh'
  /auth/forgot-password:
    $ref: './auth.yaml#/paths/~1auth~1forgot-password'
  /auth/reset-password:
    $ref: './auth.yaml#/paths/~1auth~1reset-password'
  
  # FAQ endpoints
  /faqs:
    $ref: './faqs.yaml#/paths/~1faqs'
  /faqs/getFaqById/{id}:
    $ref: './faqs.yaml#/paths/~1faqs~1getFaqById~1{id}'
  /faqs/updateFaq/{id}:
    $ref: './faqs.yaml#/paths/~1faqs~1updateFaq~1{id}'
  /faqs/softDeleteFaq/{id}:
    $ref: './faqs.yaml#/paths/~1faqs~1softDeleteFaq~1{id}'
  /faqs/togglestatus/{id}:
    $ref: './faqs.yaml#/paths/~1faqs~1togglestatus~1{id}'
  /faqs/trash:
    $ref: './faqs.yaml#/paths/~1faqs~1trash'
  /faqs/restore/{id}:
    $ref: './faqs.yaml#/paths/~1faqs~1restore~1{id}'
  /faqs/permanentDelete/{id}:
    $ref: './faqs.yaml#/paths/~1faqs~1permanentDelete~1{id}'

    #BlogCategory endpoints
  /blogCategory:
    $ref: './blogCategory.yaml#/paths/~1blogCategory'
  /blogCategory/getblogCategoryById/{id}:
    $ref: './blogCategory.yaml#/paths/~1blogCategory~1getblogCategoryById~1{id}'
  /blogCategory/updateblogCategory/{id}:
    $ref: './blogCategory.yaml#/paths/~1blogCategory~1updateblogCategory~1{id}'
  /blogCategory/softDeleteblogCategory/{id}:
    $ref: './blogCategory.yaml#/paths/~1blogCategory~1softDeleteblogCategory~1{id}'
  /blogCategory/togglestatus/{id}:
    $ref: './blogCategory.yaml#/paths/~1blogCategory~1togglestatus~1{id}'
  /blogCategory/trash:
    $ref: './blogCategory.yaml#/paths/~1blogCategory~1trash'
  /blogCategory/restore/{id}:
    $ref: './blogCategory.yaml#/paths/~1blogCategory~1restore~1{id}'
  /blogCategory/permanentDelete/{id}:
    $ref: './blogCategory.yaml#/paths/~1blogCategory~1permanentDelete~1{id}'
  
  # category endpoints
  /category:
    $ref: './category.yaml#/paths/~1category'
  /category/getcategoryById/{id}:
    $ref: './category.yaml#/paths/~1category~1getCategoryById~1{id}'
  /category/updatecategory/{id}:
    $ref: './category.yaml#/paths/~1category~1updateCategory~1{id}'
  /category/softDeletecategory/{id}:
    $ref: './category.yaml#/paths/~1category~1softDeleteCategory~1{id}'
  /category/togglestatus/{id}:
    $ref: './category.yaml#/paths/~1category~1toggleStatus~1{id}'
  /category/trash:
    $ref: './category.yaml#/paths/~1category~1trash'
  /category/restore/{id}:
    $ref: './category.yaml#/paths/~1category~1restore~1{id}'
  /category/permanentDelete/{id}:
    $ref: './category.yaml#/paths/~1category~1permanentDelete~1{id}'


   
  # Agency endpoints
  /agencies:
    $ref: './agencies.yaml#/paths/~1agencies'
  /agencies/{id}:
    $ref: './agencies.yaml#/paths/~1agencies~1{id}'
  /agencies/softDelete/{id}:
    $ref: './agencies.yaml#/paths/~1agencies~1softDelete~1{id}'
  /agencies/trash:
    $ref: './agencies.yaml#/paths/~1agencies~1trash'
  /agencies/restore/{id}:
    $ref: './agencies.yaml#/paths/~1agencies~1restore~1{id}'
  /agencies/toggleStatus/{id}:
    $ref: './agencies.yaml#/paths/~1agencies~1toggleStatus~1{id}'
  /agencies/permanentDelete/{id}:
    $ref: './agencies.yaml#/paths/~1agencies~1permanentDelete~1{id}'

    # NewsLetter endpoints
  /newsletters:
    $ref: './newsletters.yaml#/paths/~1newsletters'
  /newsletters/getNewsLetterById/{id}:
    $ref: './newsletters.yaml#/paths/~1newsletters~1getNewsLetterById~1{id}'
  /newsletters/updateNewsLetter/{id}:
    $ref: './newsletters.yaml#/paths/~1newsletters~1updateNewsLetter~1{id}'
  /newsletters/softDeleteNewsLetter/{id}:
    $ref: './newsletters.yaml#/paths/~1newsletters~1softDeleteNewsLetter~1{id}'
  /newsletters/togglestatus/{id}:
    $ref: './newsletters.yaml#/paths/~1newsletters~1togglestatus~1{id}'
  /newsletters/trash:
    $ref: './newsletters.yaml#/paths/~1newsletters~1trash'
  /newsletters/restore/{id}:
    $ref: './newsletters.yaml#/paths/~1newsletters~1restore~1{id}'
  /newsletters/permanentDelete/{id}:
    $ref: './newsletters.yaml#/paths/~1newsletters~1permanentDelete~1{id}'

  # Page endpoints
  /pages:
    $ref: './page.yaml#/paths/~1pages'
  /pages/getPageById/{id}:
    $ref: './page.yaml#/paths/~1pages~1getPageById~1{id}'
  /pages/updatePage/{id}:
    $ref: './page.yaml#/paths/~1pages~1updatePage~1{id}'
  /pages/softDeletePage/{id}:
    $ref: './page.yaml#/paths/~1pages~1softDeletePage~1{id}'
  /pages/togglestatus/{id}:
    $ref: './page.yaml#/paths/~1pages~1togglestatus~1{id}'
  /pages/trash:
    $ref: './page.yaml#/paths/~1pages~1trash'
  /pages/restore/{id}:
    $ref: './page.yaml#/paths/~1pages~1restore~1{id}'
  /pages/permanentDelete/{id}:
    $ref: './page.yaml#/paths/~1pages~1permanentDelete~1{id}'

  # Config endpoints
  /configs:
    $ref: './configs.yaml#/paths/~1configs'
  /configs/getConfigById/{id}:
    $ref: './configs.yaml#/paths/~1configs~1getConfigById~1{id}'
  /configs/updateConfig/{id}:
    $ref: './configs.yaml#/paths/~1configs~1updateConfig~1{id}'
  /configs/softDeleteConfig/{id}:
    $ref: './configs.yaml#/paths/~1configs~1softDeleteConfig~1{id}'
  /configs/togglestatus/{id}:
    $ref: './configs.yaml#/paths/~1configs~1togglestatus~1{id}'
  /configs/trash:
    $ref: './configs.yaml#/paths/~1configs~1trash'
  /configs/restore/{id}:
    $ref: './configs.yaml#/paths/~1configs~1restore~1{id}'
  /configs/permanentDelete/{id}:
    $ref: './configs.yaml#/paths/~1configs~1permanentDelete~1{id}'


# FooterInfo endpoints
  /footerinfo:
    $ref: './footerinfo.yaml#/paths/~1footerinfo'
  /footerinfo/getfooterinfoById/{id}:
    $ref: './footerinfo.yaml#/paths/~1footerinfo~1getfooterinfoById~1{id}'
  /footerinfo/updatefooterinfo/{id}:
    $ref: './footerinfo.yaml#/paths/~1footerinfo~1updatefooterinfo~1{id}'
  /footerinfo/softDeletefooterinfo/{id}:
    $ref: './footerinfo.yaml#/paths/~1footerinfo~1softDeletefooterinfo~1{id}'
  /footerinfo/togglestatus/{id}:
    $ref: './footerinfo.yaml#/paths/~1footerinfo~1togglestatus~1{id}'
  /footerinfo/trash:
    $ref: './footerinfo.yaml#/paths/~1footerinfo~1trash'
  /footerinfo/restore/{id}:
    $ref: './footerinfo.yaml#/paths/~1footerinfo~1restore~1{id}'
  /footerinfo/permanentDelete/{id}:
    $ref: './footerinfo.yaml#/paths/~1footerinfo~1permanentDelete~1{id}'

# Settings endpoints
  /settings:
    $ref: './settings.yaml#/paths/~1settings'

  # Banner Management endpoints
  /banners:
    $ref: './banner.yaml#/paths/~1banners'

components:
  schemas:
    # Reference schemas from other files
    Faq:
      $ref: './faqs.yaml#/components/schemas/Faq'
    FaqInput:
      $ref: './faqs.yaml#/components/schemas/FaqInput'
    Category:
      $ref: './category.yaml#/components/schemas/Category'
    CategoryInput:
      $ref: './category.yaml#/components/schemas/CategoryInput'

    Agency:
      $ref: './agencies.yaml#/components/schemas/Agency'
    AgencyInput:
      $ref: './agencies.yaml#/components/schemas/AgencyInput'

    FooterInfo:
      $ref: './footerinfo.yaml#/components/schemas/FooterInfo'
    FooterInfoInput:
      $ref: './footerinfo.yaml#/components/schemas/FooterInfoInput'

      
    Config:
      $ref: './configs.yaml#/components/schemas/Config'
    ConfigInput:
      $ref: './configs.yaml#/components/schemas/ConfigInput'
    Settings:
      $ref: './settings.yaml#/components/schemas/Settings'
    SettingsResponse:
      $ref: './settings.yaml#/components/schemas/SettingsResponse'
    
    blogCategory:
      $ref: './blogCategory.yaml#/components/schemas/blogCategory'
    blogCategoryInput:
      $ref: './blogCategory.yaml#/components/schemas/blogCategoryInput'
       

       # Reference schemas from other files
    NewsLetter:
      $ref: './newsletters.yaml#/components/schemas/NewsLetter'
    NewsLetterInput:
      $ref: './newsletters.yaml#/components/schemas/NewsLetterInput'

    Page:
      $ref: './page.yaml#/components/schemas/Page'
    PageInput:
      $ref: './page.yaml#/components/schemas/PageInput'


    # Common Error schema (used by all)
    Error:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid input
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    CSRFToken:
      type: apiKey
      in: header
      name: X-XSRF-TOKEN

    # Common rate limit error schema
    RateLimitError:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Too many requests. Please try again later.
        retryAfter:
          type: integer
          example: 900
          description: Time in seconds until the next attempt is allowed

    # CSRF error schema
    CSRFError:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Invalid CSRF token